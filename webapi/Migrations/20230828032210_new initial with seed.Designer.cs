// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using webapi.Data;

#nullable disable

namespace webapi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230828032210_new initial with seed")]
    partial class newinitialwithseed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MealRequestsCompanions", b =>
                {
                    b.Property<string>("CompanionsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MealRequestModelId")
                        .HasColumnType("int");

                    b.HasKey("CompanionsId", "MealRequestModelId");

                    b.HasIndex("MealRequestModelId");

                    b.ToTable("MealRequestsCompanions");
                });

            modelBuilder.Entity("webapi.Models.MealRequestModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("MealRequests");
                });

            modelBuilder.Entity("webapi.Models.RestaurantModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Budget")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Style")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main Street",
                            Budget = "$$$",
                            CreatorId = "1",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A cozy place with delicious food.",
                            Name = "Restaurant 1",
                            Style = "Italian"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Elm Avenue",
                            Budget = "$$",
                            CreatorId = "2",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Authentic flavors from around the world.",
                            Name = "Restaurant 2",
                            Style = "Asian Fusion"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Oak Street",
                            Budget = "$$$",
                            CreatorId = "3",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A modern atmosphere with a diverse menu.",
                            Name = "Restaurant 3",
                            Style = "American"
                        },
                        new
                        {
                            Id = 4,
                            Address = "101 Maple Road",
                            Budget = "$$$$",
                            CreatorId = "4",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Experience fine dining at its best.",
                            Name = "Restaurant 4",
                            Style = "French"
                        },
                        new
                        {
                            Id = 5,
                            Address = "222 Pine Lane",
                            Budget = "$$",
                            CreatorId = "5",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Savor the taste of authentic sushi.",
                            Name = "Restaurant 5",
                            Style = "Japanese"
                        });
                });

            modelBuilder.Entity("webapi.Models.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("BudgetMax")
                        .HasColumnType("int");

                    b.Property<int?>("BudgetMin")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5f17d68d-6188-451b-8db9-c21aff14c07a",
                            DateJoined = new DateTime(2023, 8, 28, 3, 22, 10, 461, DateTimeKind.Utc).AddTicks(1538),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user1@test.ca",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@TEST.CA",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEC64ENJQL7vEvrBwrAnU5oI37kiCFvRjNp1nbMT6eXqD3sqqiNtP4gkdS4M7FcsxQQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "125c4bd8-4e3b-4dad-b394-b04ce75d90da",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce474f9e-7b47-44f0-bb27-b8763ad0f905",
                            DateJoined = new DateTime(2023, 8, 28, 3, 22, 10, 518, DateTimeKind.Utc).AddTicks(3820),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user2@test.ca",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@TEST.CA",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEObx96fSrymchuuIjhbyALzVtU0D0d11W8WqI50gLpLZruqC1lNS3YmvfBL0wCHVcg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f0992a4f-ad64-4456-b13a-bacc7a2aa78c",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3c6c22dc-8558-4efe-891a-ea54292d93d6",
                            DateJoined = new DateTime(2023, 8, 28, 3, 22, 10, 569, DateTimeKind.Utc).AddTicks(7112),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user3@test.ca",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@TEST.CA",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAEAVnQ/V+QzOcG8A8CRMX7JjYHWkz1vLUn9CPOxx8rFx4MkJ4kZIfTY6ftijBtK/5TA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "96451911-98c7-45fe-96c2-f93dc1378d68",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "924bc51f-3c3e-401f-8a78-3dc024952c41",
                            DateJoined = new DateTime(2023, 8, 28, 3, 22, 10, 622, DateTimeKind.Utc).AddTicks(2956),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user4@test.ca",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@TEST.CA",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAIAAYagAAAAEF/c2cl66dROEaD78OgAgsP1D2oXHUVECGnSYlFCvW1F+yqH6LMXPoX3m4oap1yQHA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d3c3065-b28e-4630-9798-4003d14df323",
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ba556184-5792-49c8-90ba-552324180edc",
                            DateJoined = new DateTime(2023, 8, 28, 3, 22, 10, 674, DateTimeKind.Utc).AddTicks(6846),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user5@test.ca",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@TEST.CA",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAIAAYagAAAAEEedq7AMJZq2KERqRzeev97qTMeCRu1kk0cndzLe6tZiaBF0YkKWRk8yeezCutZRGg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9bee7034-a82f-4955-9ebc-cd55557ec09a",
                            TwoFactorEnabled = false,
                            UserName = "user5"
                        });
                });

            modelBuilder.Entity("MealRequestsCompanions", b =>
                {
                    b.HasOne("webapi.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("CompanionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webapi.Models.MealRequestModel", null)
                        .WithMany()
                        .HasForeignKey("MealRequestModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("webapi.Models.MealRequestModel", b =>
                {
                    b.HasOne("webapi.Models.UserModel", "Creator")
                        .WithMany("CreatedMealRequests")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webapi.Models.RestaurantModel", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("webapi.Models.RestaurantModel", b =>
                {
                    b.HasOne("webapi.Models.UserModel", "Creator")
                        .WithMany("CreatedRestaurants")
                        .HasForeignKey("CreatorId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("webapi.Models.UserModel", b =>
                {
                    b.Navigation("CreatedMealRequests");

                    b.Navigation("CreatedRestaurants");
                });
#pragma warning restore 612, 618
        }
    }
}
